// src/utils/AppContext.js  
import activityService from '../services/activityService'; // Update this line
import locationService from '../services/locationService';
import callLogService from '../services/callLogService';
import samsungHealthService from '../services/samsungHealthService';
import { generateDailySummary } from '../services/summaryService';
import databaseService from '../services/database';
import errorHandler from '../services/errorLogger';
import dataFusionService from '../services/dataFusionService';
import eventCorrelationEngine from '../services/eventCorrelationEngine';
import { saveSettings, loadSettings } from './settingsStorage';
import React, { createContext, useContext, useState, useEffect, useMemo, useCallback } from 'react';

// Creëer de context
const AppContext = createContext();

// Custom hook om gemakkelijk toegang te krijgen tot de context
export const useAppContext = () => useContext(AppContext);

export const AppProvider = ({ children }) => {
  // App state
  const [isLoading, setIsLoading] = useState(false);
  const [settings, setSettings] = useState({
    trackLocation: true,
    trackActivity: true,
    trackCalls: true,
    allowNotifications: true,
    dailyNotifications: true,
    weeklyNotifications: true,
    darkMode: false,
    isOnboarded: false,
    stepGoal: 10000,
    privacySettings: {
      shareAnalytics: false,
      storeEncrypted: true,
      encryptCallData: true,
      retentionPeriod: 90 // dagen
    },
    samsungHealthEnabled: false,
    samsungHealthAutoSync: true,
    samsungHealthPermissions: []
  });
  
  const [activityStats, setActivityStats] = useState({
    todaySteps: 0,
    activeTime: 0,
    currentActivity: 'unknown',
    recentActivities: [],
    activityGoals: {
      steps: 10000,
      activeMinutes: 30
    }
  });
  
  const [locationStats, setLocationStats] = useState({
    frequentPlaces: [],
    currentLocation: null,
    recentVisits: []
  });
  
  const [callStats, setCallStats] = useState({
    frequentContacts: [],
    recentCalls: [],
    callSummary: null
  });
  
  const [dailySummary, setDailySummary] = useState(null);
  const [weeklyTrends, setWeeklyTrends] = useState(null);

  // Laad instellingen bij opstarten
  useEffect(() => {
    async function loadAppSettings() {
      try {
        const savedSettings = await loadSettings();
        if (savedSettings) {
          setSettings(prev => ({ ...prev, ...savedSettings }));
          
          // Start services als ze enabled zijn in de opgeslagen instellingen
          if (savedSettings.trackActivity) {
            if (__DEV__) console.log('Starting activity monitoring on app start...');
            await activityService.startMonitoring();
          }
          
          if (savedSettings.trackLocation) {
            if (__DEV__) console.log('Starting location tracking on app start...');
            await locationService.startTracking();
          }
          
          // Initialiseer Samsung Health als enabled
          if (savedSettings.samsungHealthEnabled) {
            if (__DEV__) console.log('Initializing Samsung Health on app start...');
            try {
              const initResult = await samsungHealthService.initialize();
              if (initResult.success && savedSettings.samsungHealthAutoSync) {
                // Auto-sync als enabled
                if (__DEV__) console.log('Starting Samsung Health auto-sync...');
                samsungHealthService.syncAllHealthData();
              }
            } catch (error) {
              if (__DEV__) console.log('Samsung Health initialization failed:', error);
            }
          }
        } else {
          // Default instellingen - start services als ze default enabled zijn
          if (settings.trackActivity) {
            if (__DEV__) console.log('Starting activity monitoring with default settings...');
            await activityService.startMonitoring();
          }
          
          if (settings.trackLocation) {
            if (__DEV__) console.log('Starting location tracking with default settings...');
            await locationService.startTracking();
          }
        }
      } catch (error) {
        errorHandler.error('Fout bij laden instellingen', error, 'AppContext');
      }
    }
    
    loadAppSettings();
  }, []);

  // Functie om instellingen bij te werken - memoized for performance
  const updateSettings = useCallback(async (newSettings) => {
    try {
      const updatedSettings = { ...settings, ...newSettings };
      setSettings(updatedSettings);
      
      // Sla instellingen op
      await saveSettings(updatedSettings);
      
      // Pas services aan op basis van nieuwe instellingen
      if (settings.trackLocation !== updatedSettings.trackLocation) {
        if (updatedSettings.trackLocation) {
          await locationService.startTracking();
        } else {
          await locationService.stopTracking();
        }
      }
      
      if (settings.trackActivity !== updatedSettings.trackActivity) {
        if (updatedSettings.trackActivity) {
          await activityService.startMonitoring();
        } else {
          await activityService.stopMonitoring();
        }
      }
      
      return { success: true };
    } catch (error) {
      errorHandler.error('Fout bij updaten instellingen', error, 'AppContext');
      return { success: false, error };
    }
  }, [settings]);

  // Laad statistieken voor het dashboard met advanced data fusion - memoized for performance
  const loadDashboardStats = useCallback(async () => {
    setIsLoading(true);
    
    try {
      const currentDate = new Date();
      const startOfDay = new Date(currentDate);
      startOfDay.setHours(0, 0, 0, 0);
      const endOfDay = new Date(currentDate);
      endOfDay.setHours(23, 59, 59, 999);
      
      const startTimestamp = startOfDay.getTime();
      const endTimestamp = endOfDay.getTime();
      
      // 🔬 ADVANCED DATA FUSION - Collect data from all sources
      const dataSources = {};
      
      // Samsung Health data (highest priority)
      if (settings.samsungHealthEnabled && samsungHealthService.isReady()) {
        if (__DEV__) console.log('🏥 Loading Samsung Health data...');
        try {
          const healthSummary = await samsungHealthService.getHealthSummary(currentDate);
          if (healthSummary) {
            dataSources.samsungHealth = {
              source: 'samsung_health',
              data: [{
                timestamp: startTimestamp,
                steps: healthSummary.steps || 0,
                heartRate: healthSummary.heartRate || 0,
                calories: healthSummary.calories || 0,
                sleep: healthSummary.sleep || 0,
                confidence: 0.95
              }]
            };
          }
        } catch (error) {
          if (__DEV__) console.log('Samsung Health data failed, continuing with other sources');
        }
      }
      
      // Activity Service data (medium priority)
      if (settings.trackActivity) {
        if (__DEV__) console.log('📱 Loading ActivityService data...');
        const stepsCount = await activityService.getStepsCount(startTimestamp, endTimestamp);
        const activitySummary = await activityService.getActivitySummary(startTimestamp, endTimestamp);
        
        dataSources.activityService = {
          source: 'activity_service',
          data: [{
            timestamp: startTimestamp,
            steps: stepsCount || 0,
            walking: activitySummary?.walking || 0,
            running: activitySummary?.running || 0,
            confidence: 0.75
          }]
        };
      }
      
      // Location data for context
      if (settings.trackLocation) {
        const currentLocation = await locationService.getCurrentLocation();
        if (currentLocation) {
          dataSources.location = {
            source: 'location_service',
            data: [{
              timestamp: startTimestamp,
              location: currentLocation,
              confidence: 0.85
            }]
          };
        }
      }
      
      // 🧠 APPLY DATA FUSION ALGORITHMS
      let fusedData = {};
      if (Object.keys(dataSources).length > 1) {
        // Harmonize timestamps across sources
        const harmonized = dataFusionService.harmonizeTimestamps(dataSources);
        
        // Calculate contextual confidence for steps data
        const stepsDataPoint = {
          source: dataSources.samsungHealth ? 'samsung_health' : 'activity_service',
          type: 'steps',
          value: dataSources.samsungHealth?.data[0]?.steps || dataSources.activityService?.data[0]?.steps || 0,
          timestamp: startTimestamp
        };
        
        const confidenceResult = dataFusionService.calculateContextualConfidence(stepsDataPoint, {
          location: dataSources.location?.data[0],
          validation: Object.values(dataSources).filter(s => s.source !== stepsDataPoint.source)
        });
        
        fusedData = {
          steps: stepsDataPoint.value,
          stepsConfidence: confidenceResult.confidence,
          stepsBoostReasons: confidenceResult.reasons
        };
        
        // Track data lineage for transparency
        const lineageId = dataFusionService.trackDataLineage(stepsDataPoint, Object.values(dataSources));
        fusedData.stepsLineageId = lineageId;
        
        if (__DEV__) {
          console.log('🔬 Data Fusion Results:', {
            originalValue: stepsDataPoint.value,
            confidence: confidenceResult.confidence,
            boost: confidenceResult.boost,
            reasons: confidenceResult.reasons
          });
        }
      } else if (dataSources.samsungHealth) {
        fusedData = {
          steps: dataSources.samsungHealth.data[0].steps,
          stepsConfidence: 0.95,
          stepsBoostReasons: ['Direct Samsung Health sensor data']
        };
      } else if (dataSources.activityService) {
        fusedData = {
          steps: dataSources.activityService.data[0].steps,
          stepsConfidence: 0.75,
          stepsBoostReasons: ['Activity sensor data']
        };
      } else {
        fusedData = { steps: 0, stepsConfidence: 0, stepsBoostReasons: [] };
      }
      
      // Update activity stats with fused data
      setActivityStats({
        ...activityStats,
        todaySteps: fusedData.steps,
        stepsConfidence: fusedData.stepsConfidence,
        stepsLineageId: fusedData.stepsLineageId,
        activeTime: dataSources.activityService?.data[0]?.walking + dataSources.activityService?.data[0]?.running || 0,
        currentActivity: 'walking' // Simplified for now
      });
      
      // Laad locatiestatistieken - echte GPS data
      if (settings.trackLocation) {
        if (__DEV__) console.log('Loading real location data...');
        const frequentPlaces = await locationService.getVisitedPlaces(startTimestamp, endTimestamp, 5);
        const currentLocation = await locationService.getCurrentLocation();
        
        setLocationStats({
          ...locationStats,
          frequentPlaces,
          currentLocation
        });
      }
      
      // Laad oproepstatistieken - echte call log data (Android)
      if (settings.trackCalls && callLogService.isAvailable) {
        if (__DEV__) console.log('Loading real call log data...');
        // Syncen van calllog data
        await callLogService.syncCallLogs();
        
        const callAnalytics = await callLogService.getCallAnalytics(startTimestamp, endTimestamp);
        const frequentContacts = await callLogService.getFrequentContacts(startTimestamp, endTimestamp, 5);
        
        setCallStats({
          ...callStats,
          frequentContacts,
          callSummary: callAnalytics
        });
      }
      
      // 📊 ENHANCED DAILY SUMMARY with Event Correlation
      try {
        const formattedDate = currentDate.toISOString().split('T')[0];
        
        // Probeer eerst bestaande samenvatting op te halen via databaseService
        const existingSummary = await databaseService.getDailySummary(formattedDate);
        if (existingSummary) {
          setDailySummary(existingSummary);
        } else {
          // Genereer nieuwe samenvatting met event correlation
          if (__DEV__) console.log('🧠 Generating daily summary with event correlation...');
          
          // Collect all events for correlation analysis
          const events = [];
          
          // Add activity events
          if (fusedData.steps > 0) {
            events.push({
              id: `steps_${startTimestamp}`,
              type: 'steps',
              timestamp: startTimestamp,
              value: fusedData.steps,
              confidence: fusedData.stepsConfidence,
              source: dataSources.samsungHealth ? 'samsung_health' : 'activity_service',
              isHighForUser: fusedData.steps > 8000, // Simplified threshold
              trend: fusedData.steps > 7000 ? 'increasing' : 'normal'
            });
          }
          
          // Add location events
          if (dataSources.location) {
            events.push({
              id: `location_${startTimestamp}`,
              type: 'location',
              timestamp: startTimestamp,
              name: dataSources.location.data[0].location.name || 'Unknown location',
              confidence: 0.85,
              source: 'location_service'
            });
          }
          
          // Run event correlation analysis
          let correlationResults = null;
          if (events.length > 1) {
            try {
              correlationResults = await eventCorrelationEngine.analyzeEventCorrelations(currentDate, events);
              if (__DEV__) {
                console.log('🔗 Event Correlation Results:', {
                  totalEvents: correlationResults.totalEvents,
                  correlatedEvents: correlationResults.correlatedEvents,
                  narratives: correlationResults.narratives.length,
                  confidence: correlationResults.confidence
                });
              }
            } catch (correlationError) {
              if (__DEV__) console.log('Event correlation failed:', correlationError);
            }
          }
          
          // Generate summary with correlation insights
          const generated = await generateDailySummary(formattedDate);
          if (generated) {
            // Enhance summary with correlation narratives
            if (correlationResults && correlationResults.narratives.length > 0) {
              const enhancedSummary = {
                ...generated,
                correlationNarratives: correlationResults.narratives,
                correlationConfidence: correlationResults.confidence,
                enhancedInsights: correlationResults.narratives.map(n => n.text).join(' ')
              };
              setDailySummary(enhancedSummary);
            } else if (generated.success === false && generated.error === 'FUTURE_DATE') {
              // Toekomst datum error - toon bericht aan gebruiker
              if (__DEV__) console.warn('Cannot generate diary for future date:', generated.message);
              setDailySummary({
                error: 'FUTURE_DATE',
                message: generated.message,
                date: formattedDate
              });
            } else {
              setDailySummary(generated);
            }
          }
        }
      } catch (summaryError) {
        errorHandler.error('Fout bij laden/genereren dagelijkse samenvatting', summaryError, 'AppContext');
      }
      
      // Laad wekelijkse trends
      try {
        const trends = await databaseService.getTrends(7);
        if (trends) {
          setWeeklyTrends(trends);
        }
      } catch (trendsError) {
        errorHandler.error('Fout bij laden wekelijkse trends', trendsError, 'AppContext');
      }
      
      return { success: true };
    } catch (error) {
      errorHandler.error('Fout bij laden dashboard statistieken', error, 'AppContext');
      return { success: false, error };
    } finally {
      setIsLoading(false);
    }
  }, [settings.trackActivity, settings.trackLocation, settings.trackCalls]);

  // Herladen van data voor een specifiek statistiektype - memoized for performance
  const refreshStats = useCallback(async (statType) => {
    setIsLoading(true);
    
    try {
      const currentDate = new Date();
      const startOfDay = new Date(currentDate);
      startOfDay.setHours(0, 0, 0, 0);
      const endOfDay = new Date(currentDate);
      endOfDay.setHours(23, 59, 59, 999);
      
      const startTimestamp = startOfDay.getTime();
      const endTimestamp = endOfDay.getTime();
      
      switch (statType) {
        case 'activity':
          if (settings.trackActivity) {
            const todaySteps = await activityService.getStepsCount(startTimestamp, endTimestamp);
            const activitySummary = await activityService.getActivitySummary(startTimestamp, endTimestamp);
            
            setActivityStats({
              ...activityStats,
              todaySteps: todaySteps,
              activeTime: activitySummary ? activitySummary.walking + activitySummary.running : 0
            });
          }
          break;
          
        case 'location':
          if (settings.trackLocation) {
            const frequentPlaces = await locationService.getVisitedPlaces(startTimestamp, endTimestamp, 5);
            const currentLocation = await locationService.getCurrentLocation();
            
            setLocationStats({
              ...locationStats,
              frequentPlaces,
              currentLocation
            });
          }
          break;
          
        case 'calls':
          if (settings.trackCalls && callLogService.isAvailable) {
            await callLogService.syncCallLogs();
            
            const callAnalytics = await callLogService.getCallAnalytics(startTimestamp, endTimestamp);
            const frequentContacts = await callLogService.getFrequentContacts(startTimestamp, endTimestamp, 5);
            
            setCallStats({
              ...callStats,
              frequentContacts,
              callSummary: callAnalytics
            });
          }
          break;
          
        case 'summary':
          const formattedDate = new Date().toISOString().split('T')[0];
          const summary = await generateDailySummary(formattedDate);
          if (summary) {
            setDailySummary(summary);
          }
          break;
          
        case 'trends':
          const trends = await databaseService.getTrends(7);
          if (trends) {
            setWeeklyTrends(trends);
          }
          break;
          
        default:
          // Herlaad alle stats
          await loadDashboardStats();
      }
      
      return { success: true };
    } catch (error) {
      errorHandler.error(`Fout bij verversen van ${statType} statistieken`, error, 'AppContext');
      return { success: false, error };
    } finally {
      setIsLoading(false);
    }
  }, [settings.trackActivity, settings.trackLocation, settings.trackCalls, loadDashboardStats]);

  // Context value - memoized to prevent unnecessary re-renders
  const contextValue = useMemo(() => ({
    isLoading,
    settings,
    updateSettings,
    activityStats,
    locationStats,
    callStats,
    dailySummary,
    weeklyTrends,
    loadDashboardStats,
    refreshStats
  }), [
    isLoading,
    settings,
    updateSettings,
    activityStats,
    locationStats,
    callStats,
    dailySummary,
    weeklyTrends,
    loadDashboardStats,
    refreshStats
  ]);

  return (
    <AppContext.Provider value={contextValue}>
      {children}
    </AppContext.Provider>
  );
};